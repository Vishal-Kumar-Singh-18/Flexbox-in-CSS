q2. Explain the role of the following key properties in the Flexbox layout model
1. Justify-content
2. Align-items
3. gap
4. flex-direction
5. flex-wrap

sol-

Certainly! Here's an explanation of the role of each key property in the Flexbox layout model:

1. justify-content:
   - Role: This property defines how the extra space in the flex container is distributed along the main axis.
   - Usage: You can set it to values like `flex-start` (items are packed toward the start of the flex container), `flex-end` (items are packed toward the end), `center` (items are centered), `space-between` (items are evenly distributed with the first item at the start and the last item at the end), `space-around` (items are evenly distributed with equal space around them), or `space-evenly` (items are distributed with equal space around them).
   - Example: `justify-content: space-between;`

2. align-items:
   - Role: This property defines how flex items are aligned in the flex container along the cross axis (perpendicular to the main axis).
   - Usage: It can be set to values like `flex-start` (items are aligned at the start of the cross axis), `flex-end` (items are aligned at the end), `center` (items are centered), `baseline` (items are aligned based on their baselines), or `stretch` (items are stretched to fill the container).
   - Example: align-items: center;

3. gap:
   - Role: This property sets the gap between flex items in a flex container.
   - Usage: It's a shorthand for `row-gap` and `column-gap` and accepts a length value (like pixels) or a percentage of the container's size.
   - Example: gap: 10px;

4. flex-direction:
   - Role: This property establishes the main-axis direction of the flex container and defines the direction in which the flex items are placed in the flex container.
   - Usage: It can be set to values like `row` (items are placed from left to right), `row-reverse` (items are placed from right to left), `column` (items are placed from top to bottom), or `column-reverse` (items are placed from bottom to top).
   - Example: flex-direction: column;

5. flex-wrap:
   - Role: This property defines whether flex items are forced onto a single line or can be wrapped onto multiple lines within the flex container.
   - Usage: It can be set to `nowrap` (items are not wrapped and forced into a single line), `wrap` (items wrap onto multiple lines as necessary), or `wrap-reverse` (items wrap onto multiple lines in reverse order).
   - Example: flex-wrap: wrap;

These properties, when used together, provide powerful tools for creating flexible and responsive layouts in CSS using the Flexbox model. They allow developers to control the alignment, spacing, and direction of flex items within a flex container, making it easier to create complex and dynamic web designs.